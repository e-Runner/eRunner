__author__ = 'honglei.yu'
from django.shortcuts import render_to_response
from django.template import RequestContext
from django.http import HttpResponse
from erunner.models_dimension import Prod
from erunner.models_dimension import Modl
from erunner.models_dimension import ModVersion
from erunner.models_dimension import TestSuite
from erunner.models_dimension import RunSuite
from erunner.models_fact import Jobs
from erunner.models_stat import StatJob
from erunner.models_dimension import ResultDesc

from jobs import jobscheduler
job = jobscheduler()

import json
from django.views.decorators.csrf import csrf_exempt
from django.contrib.auth.models import User
@csrf_exempt

def execute(request):
    return render_to_response('execute.html', context_instance=RequestContext(request))

def AddProduct(request):

    PostData = json.loads(request.body)

    if request.method == "POST":
        ProductName = Prod.objects.filter()
        AddProductName = []
        for i in range(0,ProductName.count()):
            AddProductName.append(ProductName[i].name)

        resultdata = json.dumps({'Product':AddProductName})

    return HttpResponse(resultdata)

def FilterJob(request):
    PostData = json.loads(request.body)
    if request.method == "POST":
        filter_product = Prod.objects.get(name=PostData['ProductName'])
        filter_module = Modl.objects.filter(product=filter_product)
        suite_list = []
        for i in range(0, filter_module.count()):
            filter_version = ModVersion.objects.filter(module = filter_module[i])
            for j in range(0, filter_version.count()):
                filter_suite = RunSuite.objects.filter(mod_version = filter_version[j])
                for k in range(0, filter_suite.count()):
                    suite_list.append(filter_suite[k])

        job_list = []
        for i in range(0, len(suite_list)):
            filter_job = Jobs.objects.filter(test_suite=suite_list[i], is_active=1)
            for j in range(0, filter_job.count()):
                job_list.append(filter_job[j])

        job_result = []
        for item in job_list:
            item_result = {}
            job_insert = Jobs.objects.get(name=item)
            test_result = StatJob.objects.get(job=job_insert)
            item_result['health'] = test_result.health_rate
            item_result['lastresult'] = ResultDesc.objects.get(id=test_result.last_result_desc_id).name
            item_result['name'] = item.name
            item_result['time'] = item.cron_expr
            item_result['enable'] = item.is_enable
            job_result.append(item_result)

        CheckResult = json.dumps({'JobS':job_result})

    return HttpResponse(CheckResult)

def InsertJob(request):
    PostData = json.loads(request.body)
    print(PostData)
    if request.method == "POST":
        test_suite1 = RunSuite.objects.get(name=PostData['TestSuite'])
        user_name1 = User.objects.get(username=PostData['UserName'])
        Job1 = Jobs(name=PostData['JobName'], test_suite=test_suite1, cron_expr=PostData['TestTime'], author=user_name1, modifier=user_name1)
        Job1.save()
        result_origin = ResultDesc.objects.get(name='Passed')
        job_origin = StatJob(job=Job1, last_result_desc=result_origin,last_no=0,last_duration=0,health_rate=100)
        job_origin.save()

    Result = json.dumps({'InsertResult': 'OK',
                         'ProductName': PostData['JobName']})
    return HttpResponse(Result)

def UpdateJob(request):
    PostData = json.loads(request.body)
    if request.method == "POST":
        UpdateJob1 = Jobs.objects.get(name=PostData['NameJob'])
        UpdateJob1.cron_expr = PostData['TimeTest']
        UpdateSuite = TestSuite.objects.get(name=PostData['SuiteTest'])
        UpdateJob1.test_suite = UpdateSuite
        UpdateJob1.is_enable = 0
        UpdateJob1.save()

    UpdateResult = json.dumps({'UpdateResult': 'OK', 'ProductName': PostData['NameProduct'], 'JobName': PostData['NameJob'], 'JobStatus': UpdateJob1.is_enable})
    return HttpResponse(UpdateResult)

def DeleteJob(request):
    PostData = json.loads(request.body)

    if request.method == "POST":
        DeleteJobName = Jobs.objects.get(name=PostData['DeleteJobName'])
        DeleteJobName.is_active=0
        DeleteJobName.save()

    deleteresult = json.dumps({'DeleteResult': 'OK'})

    return HttpResponse(deleteresult)

def EditJob(request):
    PostData = json.loads(request.body)
    if request.method == "POST":
        EditJob1 = Jobs.objects.get(name=PostData['EditJobName'])
        EditSuite = RunSuite.objects.get(id=EditJob1.test_suite_id)
        EditVersion = ModVersion.objects.get(id=EditSuite.mod_version_id)
        EditModule = Modl.objects.get(id=EditVersion.module_id)
        EditProduct = Prod.objects.get(id=EditModule.product_id)
        ReturnJob = json.dumps({'JobName': EditJob1.name,
                                'ProductName': EditProduct.name,
                                'ModuleName':EditModule.name,
                                'VersionName': EditVersion.name,
                                'SuiteName': EditSuite.name,
                                'TestTime': EditJob1.cron_expr})

    return HttpResponse(ReturnJob)


def UpdateProduct(request):

    PostData = json.loads(request.body)

    if request.method == "POST":
        ProductID = Prod.objects.get(name=PostData['ProductName'])
        ModuleName = Modl.objects.filter(product=ProductID)
        ModuleNumber = ModuleName.count()
        ModuleList = []
        for i in range(0, ModuleNumber):
            ModuleList.append(ModuleName[i].name)

    UpdateResult = json.dumps({'ModuleList': ModuleList})

    return HttpResponse(UpdateResult)

def UpdateModule(request):

    PostData = json.loads(request.body)

    if request.method == "POST":

        ModuleID = Modl.objects.get(name=PostData['ModuleName'])

        VersionName = ModVersion.objects.filter(module=ModuleID)

        VersionNumber = VersionName.count()

        VersionList = []

        for i in range(0, VersionNumber):
            VersionList.append(VersionName[i].name)

    UpdateResult = json.dumps({'VersionList': VersionList})

    return HttpResponse(UpdateResult)

def UpdateVersion(request):
    PostData = json.loads(request.body)
    if request.method == "POST":
        VersionID = ModVersion.objects.filter(name=PostData['VersionName'], module=(Modl.objects.filter(name=PostData['ModuleName'])))
        SuiteName = RunSuite.objects.filter(mod_version=VersionID)
        SuiteNumber = SuiteName.count()
        SuiteList = []
        for i in range(0, SuiteNumber):
            SuiteList.append(SuiteName[i].name)
    UpdateResult = json.dumps({'SuiteList': SuiteList})

    return HttpResponse(UpdateResult)

def ChangedJobStatus(request):
    PostData = json.loads(request.body)
    if request.method == "POST":
        ChangedJob = Jobs.objects.get(name=PostData['JobName'])
        if PostData['JobStatus'] == "YES":
            ChangedJob.is_enable = 1
        else:
            ChangedJob.is_enable = 0
        ChangedJob.save()

        if PostData['JobStatus'] == "YES":
            job.add_job(PostData['JobName'])
        else:
            job.delete_job()
        ChangedResult = json.dumps({'ChangedResult': 'OK'})
    return HttpResponse(ChangedResult)

def CheckJobName(request):
    PostData = json.loads(request.body)
    if request.method == "POST":
        JobCheck = Jobs.objects.filter(name=PostData['CheckJobName'])
        JobNumber = JobCheck.count()
        if (JobNumber == 0):
            CheckResult = json.dumps({'CheckResult': 'YES'})
        else:
            CheckResult = json.dumps({'CheckResult': 'NO'})
    return HttpResponse(CheckResult)