from django.shortcuts import render_to_response
from django.db import connection
from django.views.decorators.csrf import csrf_exempt
from django.utils import timezone
from apscheduler.scheduler import Scheduler

from jobs import jobscheduler

from erunner.models import Project
from erunner.models import Job
from erunner.models import Module
from erunner.models import Version
from erunner.models import Level
from erunner.models import Product
from erunner.models import Id
from erunner.models import JobResult
from erunner.models import Result

from django.http import HttpResponse
from django.template import RequestContext

from django.utils import simplejson

import json
import socket
import time
import datetime


job = jobscheduler()

from erunner.models_dimension import Prod
from erunner.models_fact import Jobs
from erunner.models_fact import ResultJob
from erunner.models_fact import ResultCase
from erunner.models_dimension import ResultDesc

from erunner.models_stat import StatJob
from erunner.models_fact import ResultCase
from erunner.models_dimension import Modl
from erunner.models_dimension import ModVersion
from erunner.models_dimension import TestSuite
from erunner.models_dimension import SubFW
from erunner.models_dimension import SubModl
from erunner.models_dimension import TestCase
from erunner.models_dimension import Importance

from django.contrib.auth.models import User

@csrf_exempt
# Create your views here.

def login(request):
    return render_to_response('login.html', {})


def UpdateProduct(request):

    PostData = json.loads(request.body)

    if request.method == "POST":
        ProductID = Prod.objects.get(name=PostData['ProductName'])
        ModuleName = Modl.objects.filter(product=ProductID)
        ModuleNumber = ModuleName.count()
        ModuleList = []
        for i in range(0, ModuleNumber):
            ModuleList.append(ModuleName[i].name)

    UpdateResult = json.dumps({'ModuleList': ModuleList})

    return HttpResponse(UpdateResult)


def UpdateModule(request):

    PostData = json.loads(request.body)

    if request.method == "POST":

        ModuleID = Modl.objects.get(name=PostData['ModuleName'])

        VersionName = ModVersion.objects.filter(module=ModuleID)

        VersionNumber = VersionName.count()

        VersionList = []

        for i in range(0, VersionNumber):
            VersionList.append(VersionName[i].name)

    UpdateResult = json.dumps({'VersionList': VersionList})

    return HttpResponse(UpdateResult)

def UpdateVersion(request):

    PostData = json.loads(request.body)

    if request.method == "POST":
        VersionID = ModVersion.objects.filter(name=PostData['VersionName'], module=(Modl.objects.filter(name=PostData['ModuleName'])))

        SuiteName = TestSuite.objects.filter(mod_version=VersionID)

        SuiteNumber = SuiteName.count()

        SuiteList = []

        for i in range(0, SuiteNumber):
            SuiteList.append(SuiteName[i].name)

    UpdateResult = json.dumps({'SuiteList': SuiteList})

    return HttpResponse(UpdateResult)


def execute(request):
    return render_to_response('execute.html', context_instance=RequestContext(request))

def mainframe(request):
    return render_to_response('mainframe.html', context_instance=RequestContext(request))

def analysis(request):
    return render_to_response('analysis.html', context_instance=RequestContext(request))

def report(request):
    return render_to_response('report.html', context_instance=RequestContext(request))

def result(request, JobID):
    JobIndex = request.GET.get('JobID')
    ResultJobStat = ResultJob.objects.get(id=JobIndex)
    if ResultJobStat.fail_num == 0:
        TestIndexShow="OK"
        TestIndex = "Passed"
    else:
        TestIndexShow=""
        TestIndex = "Failed"
    TotalTestNumber = ResultJobStat.fail_num+ResultJobStat.pass_num

    return render_to_response('result.html', {"JobIndex":JobIndex,"TestIndexShow":TestIndexShow, "TestIndex":TestIndex, "TestCaseNumber":TotalTestNumber, "PassedNumber": ResultJobStat.pass_num, "FailedNumber":ResultJobStat.fail_num})

def executetable(request):
    return render_to_response('exetable.html', context_instance=RequestContext(request))


def SearchResult(request):
    PostData = json.loads(request.body)
    if request.method == "POST":
        Case_Result = ResultCase.objects.filter(result_job_id=int(PostData['JobIndex']))
        CaseResultList=[]
        for index in Case_Result:
            CaseResult_Index = {}
            CaseName= TestCase.objects.get(id=index.test_case_id)
            CaseResult_Index['CaseName'] = CaseName.name
            ResultName = ResultDesc.objects.get(id=index.result_desc_id)
            CaseResult_Index['CaseResult'] = ResultName.name
            CaseResult_Index['Reserver'] = "URL"
            CaseResultList.append(CaseResult_Index)

        resultData = json.dumps(CaseResultList)

    return HttpResponse(resultData)

def SearchFailedResult(request):
    PostData = json.loads(request.body)
    if request.method == "POST":
        Case_Result = ResultCase.objects.filter(result_job_id=int(PostData['JobIndex']), result_desc_id=2)
        CaseResultList=[]
        for index in Case_Result:
            CaseResult_Index = {}
            CaseName= TestCase.objects.get(id=index.test_case_id)
            CaseResult_Index['CaseName'] = CaseName.name
            ResultName = ResultDesc.objects.get(id=index.result_desc_id)
            CaseResult_Index['CaseResult'] = ResultName.name
            CaseResult_Index['Reserver'] = "URL"
            CaseResultList.append(CaseResult_Index)

        resultData = json.dumps(CaseResultList)

    return HttpResponse(resultData)

def SearchPassedResult(request):
    PostData = json.loads(request.body)
    if request.method == "POST":
        Case_Result = ResultCase.objects.filter(result_job_id=int(PostData['JobIndex']), result_desc_id=1)
        CaseResultList=[]
        for index in Case_Result:
            CaseResult_Index = {}
            CaseName= TestCase.objects.get(id=index.test_case_id)
            CaseResult_Index['CaseName'] = CaseName.name
            ResultName = ResultDesc.objects.get(id=index.result_desc_id)
            CaseResult_Index['CaseResult'] = ResultName.name
            CaseResult_Index['Reserver'] = "URL"
            CaseResultList.append(CaseResult_Index)
        resultData = json.dumps(CaseResultList)

    return HttpResponse(resultData)

def AddProduct(request):

    PostData = json.loads(request.body)

    if request.method == "POST":
        ProductName = Prod.objects.filter()
        AddProductName = []
        for i in range(0,ProductName.count()):
            AddProductName.append(ProductName[i].name)

        resultdata = json.dumps({'Product':AddProductName})

    return HttpResponse(resultdata)


def EditJob(request):

    PostData = json.loads(request.body)

    if request.method == "POST":
        EditJob1 = Jobs.objects.get(name=PostData['EditJobName'])
        EditSuite = TestSuite.objects.get(id=EditJob1.test_suite_id)
        EditVersion = ModVersion.objects.get(id=EditSuite.mod_version_id)
        EditModule = Modl.objects.get(id=EditVersion.module_id)
        EditProduct = Prod.objects.get(id=EditModule.product_id)
        ReturnJob = json.dumps({'JobName': EditJob1.name,
                                'ProductName': EditProduct.name,
                                'ModuleName':EditModule.name,
                                'VersionName': EditVersion.name,
                                'SuiteName': EditSuite.name,
                                'TestTime': EditJob1.cron_expr})

    return HttpResponse(ReturnJob)

def ChangedJobStatus(request):
    PostData = json.loads(request.body)
    if request.method == "POST":
        ChangedJob = Jobs.objects.get(name=PostData['JobName'])
        if PostData['JobStatus'] == "YES":
            ChangedJob.is_enable = 1
        else:
            ChangedJob.is_enable = 0
        ChangedJob.save()

        if PostData['JobStatus'] == "YES":
            job.add_job(PostData['JobName'])
        else:
            job.delete_job(PostData['JobName'])
        ChangedResult = json.dumps({'ChangedResult': 'OK'})
    return HttpResponse(ChangedResult)

def RunJob(request):

    PostData = json.loads(request.body)

    if request.method == "POST":

        JobRun = Jobs.objects.get(name=PostData['JobName'])
        SuiteRun = TestSuite.objects.get(id=JobRun.test_suite_id)
        VersionRun = ModVersion.objects.get(id=SuiteRun.mod_version_id)
        ModuleRun = Modl.objects.get(id=VersionRun.module_id)
        FrameRun = SubFW.objects.get(id=ModuleRun.sub_fw_id)

        SocketData = {
            "JobName": JobRun.name,
            "TestModule": ModuleRun.name,
            "TestVersion": VersionRun.name,
            "TestSuite": SuiteRun.name,
            "Executor":'honglei.yu'
        }
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            sock.connect((FrameRun.ip, int(FrameRun.port)))
        except:
            RunResult = json.dumps({'RunResult': 'NO'})
        else:
            sock.send(json.dumps(SocketData))
            RecvMessage = sock.recv(1024)
            RunResult = json.dumps({'RunResult': RecvMessage, 'RunJobName': PostData['JobName']})

    return HttpResponse(RunResult)

def PostTestResult(request):
    PostData = json.loads(request.body)
    print(PostData)
    if request.method == "POST":
        pass_number = 0
        fail_number = 0
        block_number = 0
        omit_number = 0
        for k in range(0, len(PostData['returnvalue'])):
            if (PostData['returnvalue'][k]['TestResult']).upper() == "PASSED":
                pass_number = pass_number+1
            elif (PostData['returnvalue'][k]['TestResult']).upper() == "FAILED":
                fail_number = fail_number+1
            elif (PostData['returnvalue'][k]['TestResult']).upper() == "BLOCKED":
                block_number = block_number+1
            else:
                omit_number = omit_number+1
        if (fail_number != 0)or(block_number!=0)or(omit_number!=0):
            test_job_result = "Failed"
        else:
            test_job_result = "Passed"
        result_job = Jobs.objects.get(name=PostData['JobName'])
        result_descr = ResultDesc.objects.get(name=test_job_result)
        user_case = User.objects.get(username=PostData['UserName'])

        job_result = ResultJob(job=result_job, result_desc=result_descr,start_time=PostData['StartTime'], end_time=PostData['EndTime'], executor=user_case,
                               pass_num=pass_number, fail_num=fail_number, block_num=block_number,
                               omit_num = omit_number)
        job_result.save()
        for_stat_job = ResultJob.objects.filter(job=result_job)
        resultall=for_stat_job.count()
        print(resultall)
        passindex=0
        for item in for_stat_job:
            if (str(item.result_desc)).upper() == "PASSED":
                passindex=passindex+1
        resultratio = int(passindex*100/resultall)
        print(resultratio)
        stat_job = StatJob.objects.get(job=result_job)
        stat_job.last_no=stat_job.last_no+1
        stat_job.last_result_desc=result_descr
        if test_job_result.upper() == "PASSED":
            stat_job.last_success_time=timezone.now()
        else:
            stat_job.last_failure_time=timezone.now()
        stat_job.health_rate=resultratio
        stat_job.last_duration=PostData['DurationTime']
        stat_job.save()

        sub_module = SubModl.objects.get(name=PostData['submodule'])
        case_importance = Importance.objects.get(name='Average')
        for i in range(0, len(PostData['returnvalue'])):
            try:
                testcase = TestCase(name=PostData['returnvalue'][i]['TestCase'], version=1, sub_module=sub_module, importance=case_importance)
                testcase.save()
            except:
                pass
        for j in range(0,  len(PostData['returnvalue'])):
            try:
                case_test = TestCase.objects.get(name=PostData['returnvalue'][j]['TestCase'])
                case_descr = ResultDesc.objects.get(name=PostData['returnvalue'][j]['TestResult'])
                case_result = ResultCase(test_case=case_test, result_job=job_result, result_desc=case_descr,log_url='',bug_id='')
                case_result.save()
            except:
                pass

    PostResult = json.dumps({'Result':'OK'})

    return HttpResponse(PostResult)


def JobtoModuleandProduct(request):

    PostData = json.loads(request.body)

    if request.method == "POST":

        JobProductModule = Product.objects.get(JobName=PostData['JobName'])
        ProductName = JobProductModule.ProductName
        ModuleName = JobProductModule.ProjectName

        ProductModule = json.dumps({'ProductName':ProductName, 'ModuleName':ModuleName})

    return HttpResponse(ProductModule)

def SearchProject(request):

    PostData = json.loads(request.body)

    if request.method == "POST":

        CurProject = connection.cursor()

        sql = """select JobName,ProjectName,TestVersion,TestModule,TestLevel,StartTime,ProjectStatus from erunner_projectinformation where ProjectName='%s'""" % (
            PostData['ProjectName'])

        CurProject.execute(sql)

        ProjectInfor = CurProject.fetchall()

        projectItem = []

        for item in ProjectInfor:
            project = obj2project(item)

            projectItem.append(project)

        projectconfigure = json.dumps(projectItem)

    return HttpResponse(projectconfigure)

def ReportProductChanged(request):

    PostData = json.loads(request.body)

    if request.method == "POST":
        ModuleName = Project.objects.filter(ProductName=PostData['ProductName'])
        ModuleNumber = ModuleName.count()

        ModuleNameSort = []

        for i in range(0, ModuleNumber):
            ModuleNameSort.append(ModuleName[i].ProjectName)

        ResultReport = json.dumps({'ModuleSortName' : ModuleNameSort})

        return HttpResponse(ResultReport)

def ReportModuleChanged(request):
    PostData = json.loads(request.body)
    if request.method == "POST":
        ModuleName = Modl.objects.get(name=PostData['ModuleName'])
        ModuleVersion = ModVersion.objects.filter(module=ModuleName)
        JobList = []
        for i in range(ModuleVersion.count()):
            Suite = TestSuite.objects.filter(mod_version=ModuleVersion[i])
            for j in range(Suite.count()):
                JobName=Jobs.objects.filter(test_suite=Suite[j], is_active=1)
                for k in range(JobName.count()):
                    JobList.append(JobName[k].name)
        ReportResult = json.dumps({'JobSortName' : JobList})
        return HttpResponse(ReportResult)

def ReportJobChanged(request):

    PostData = json.loads(request.body)

    if request.method == "POST":
        JobName = Jobs.objects.get(name=PostData['JobName'])
        JobTestResult = ResultJob.objects.filter(job=JobName).order_by('-start_time')
        Joblist = []
        for item in JobTestResult:
            IndexResult={}
            IndexResult['JobId'] = item.id
            IndexResult['JobName']=PostData['JobName']
            TotalNumber = item.pass_num+item.fail_num
            IndexResult['TotalNumber']=TotalNumber
            IndexResult['PassNumber'] = item.pass_num
            ratio = "%.4f"%(float(item.pass_num)/TotalNumber)
            IndexResult['Ratio'] = "%.2f"%(100*(float(ratio)))
            IndexResult['StartTime'] = str(item.start_time)
            IndexResult['DurationTime'] = (item.end_time-item.start_time).seconds
            Joblist.append(IndexResult)

        JobReport = json.dumps({'JobResult':Joblist})

        return HttpResponse(JobReport)


def InsertJob(request):
    PostData = json.loads(request.body)
    if request.method == "POST":
        test_suite1 = TestSuite.objects.get(name=PostData['TestSuite'])
        user_name1 = User.objects.get(username=PostData['UserName'])
        Job1 = Jobs(name=PostData['JobName'], test_suite=test_suite1, cron_expr=PostData['TestTime'], author=user_name1, modifier=user_name1)
        Job1.save()

        result_origin = ResultDesc.objects.get(name='Passed')
        job_origin = StatJob(job=Job1, last_result_desc=result_origin,last_no=0,last_duration=0,health_rate=100)
        job_origin.save()

    Result = json.dumps({'InsertResult': 'OK',
                         'ProductName': PostData['JobName']})
    return HttpResponse(Result)

def UpdateJob(request):

    PostData = json.loads(request.body)

    if request.method == "POST":
        UpdateJob1 = Jobs.objects.get(name=PostData['NameJob'])
        UpdateJob1.cron_expr = PostData['TimeTest']
        UpdateSuite = TestSuite.objects.get(name=PostData['SuiteTest'])
        UpdateJob1.test_suite = UpdateSuite
        UpdateJob1.is_enable = 0
        UpdateJob1.save()

    UpdateResult = json.dumps({'UpdateResult': 'OK', 'ProductName': PostData['NameProduct'], 'JobName': PostData['NameJob'], 'JobStatus': UpdateJob1.is_enable})
    return HttpResponse(UpdateResult)

def DeleteJob(request):
    PostData = json.loads(request.body)

    if request.method == "POST":
        DeleteJobName = Jobs.objects.get(name=PostData['DeleteJobName'])
        DeleteJobName.is_active=0
        DeleteJobName.save()

    deleteresult = json.dumps({'DeleteResult': 'OK'})

    return HttpResponse(deleteresult)

def FilterJob(request):
    PostData = json.loads(request.body)

    if request.method == "POST":
        filter_product = Prod.objects.get(name=PostData['ProductName'])
        filter_module = Modl.objects.filter(product=filter_product)
        suite_list = []
        for i in range(0, filter_module.count()):
            filter_version = ModVersion.objects.filter(module = filter_module[i])
            for j in range(0, filter_version.count()):
                filter_suite = TestSuite.objects.filter(mod_version = filter_version[j])
                for k in range(0, filter_suite.count()):
                    suite_list.append(filter_suite[k])

        job_list = []
        for i in range(0, len(suite_list)):
            filter_job = Jobs.objects.filter(test_suite=suite_list[i], is_active=1)
            for j in range(0, filter_job.count()):
                job_list.append(filter_job[j])

        job_result = []
        for item in job_list:
            item_result = {}
            job_insert = Jobs.objects.get(name=item)
            test_result = StatJob.objects.get(job=job_insert)
            item_result['health'] = test_result.health_rate
            item_result['lastresult'] = ResultDesc.objects.get(id=test_result.last_result_desc_id).name
            item_result['name'] = item.name
            item_result['time'] = item.cron_expr
            item_result['enable'] = item.is_enable

            job_result.append(item_result)

        CheckResult = json.dumps({'JobS':job_result})

    return HttpResponse(CheckResult)

def CheckJobName(request):
    PostData = json.loads(request.body)
    if request.method == "POST":
        JobCheck = Jobs.objects.filter(name=PostData['CheckJobName'])
        JobNumber = JobCheck.count()
        if (JobNumber == 0):
            CheckResult = json.dumps({'CheckResult': 'YES'})
        else:
            CheckResult = json.dumps({'CheckResult': 'NO'})

    return HttpResponse(CheckResult)


def obj2dict(objectBody):

    d = {}

    d['TestModule'] = objectBody.Module
    d['CaseNumber'] = objectBody.CaseNum
    d['TestResult'] = objectBody.Result

    return d

def obj2jobReport(jobdata):

    job = {}
    job['JobName'] = jobdata.JobName
    job['ResultJob'] = jobdata.JobResult
    job['TotalNumber'] = jobdata.TotalNumber
    job['PassedNumber'] = jobdata.PassedNumber
    job['StartTime'] = jobdata.StartTime.strftime("%Y-%m-%d %H:%M:%S")
    job['DurationTime'] = jobdata.DurationTime

    return job

def obj2project(projectdate):

    project = {}

    project['JobName'] = projectdate[0]
    project['ProductName'] = projectdate[1]
    project['TestVersion'] = projectdate[2]
    project['TestModule'] = projectdate[3]
    project['TestLevel'] = projectdate[4]
    project['StartTime'] = str(projectdate[5])
    project['ProjectStatus'] = projectdate[6]

    return project


def obj2job(jobdate):
    JobMessage = {}

    JobMessage['JobName'] = jobdate.JobName
    JobMessage['JobHealth'] = jobdate.JobHealth
    JobMessage['LastResult'] = jobdate.LastResult
    JobMessage['StartTime'] = jobdate.StartTime,
    JobMessage['JobStatus'] = jobdate.JobStatus

    return JobMessage


